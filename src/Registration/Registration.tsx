import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import styles from "./Registration.module.scss";

const Registration: React.FC = () => {
//const [roleType, setRoleType] = useState<"employee" | "director">("employee");
  const [login, setLogin] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [phone, setPhone] = useState("");
  const [email, setEmail] = useState("");
  const currentDate = new Date(Date.now());
  const formattedDate = currentDate.toISOString().split("T")[0];
  const [apiError, setApiError] = useState("");
  const [validationErrors, setValidationErrors] = useState<{
    [key: string]: string;
  }>({});

  const navigate = useNavigate();

  const validateFields = () => {
    const errors: { [key: string]: string } = {};

    if (!login) errors.login = "–õ–æ–≥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.";
    if (password.length < 6)
      errors.password = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.";
    if (!firstName) errors.firstName = "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.";
    if (!lastName) errors.lastName = "–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.";
    const phonePattern = /^[\d+()\- ]+$/;
    if (!phone || !phonePattern.test(phone))
      errors.phone = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.";
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!email || !emailPattern.test(email))
      errors.email = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.";

    setValidationErrors(errors);

    return Object.keys(errors).length === 0;
  };

  const handleRegistration = async () => {
    if (!validateFields()) {
      return;
    }

    console.log("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    
    const requestData = {
      //role_type: roleType,
      // organization_id: "642dc1e1-162d-4cb5-a3d1-7f4fcbcb5389",
      login,
      password,
      first_name: firstName,
      last_name: lastName,
      phone,
      email,
      start_work_date: formattedDate,
    };

    console.log("–î–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", requestData);

    try {
      const response = await fetch(
      `https://api.achiever.skroy.ru/registrations/?organization_id=642dc1e1-162d-4cb5-a3d1-7f4fcbcb5389`,
        {
          method: "POST",
          headers: {
            accept: "application/json",
            "Content-Type": "application/json",
            "X-CSRFTOKEN":
              "HI3PHmVuGIv728VhA83CgUsqNCyVW3X2MypJbE2X9kqJ5CWqLa15dVtnNWUnNOr1",
          },
          body: JSON.stringify(requestData),
        }
      );

      const responseData = await response.json();
      console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseData);

      if (!response.ok) {
        if (responseData.error && typeof responseData.error === "string") {
          throw new Error(responseData.error);
        } else if (responseData.error && typeof responseData.error === "object") {
          const errorObject: { [key: string]: string[] } = responseData.error;
          const validationErrors = Object.entries(errorObject)
           .map(([key, values]) => `${key}: ${values.join(", ")}`)
           .join("; ");
          throw new Error(validationErrors);
        } else {
          throw new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
        }
      } 
      localStorage.setItem("organization_id", responseData.organization_id);

      toast.success(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞..."
      );
      setTimeout(() => {
        navigate("/login");
      }, 3000);
    } catch (error: unknown) {
      const errorMessage =
        error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", errorMessage);
      setApiError(errorMessage);
      toast.error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${errorMessage}`);
    }
  };

  const handleReset = () => {
  //setRoleType("employee");
    setLogin("");
    setPassword("");
    setFirstName("");
    setLastName("");
    setPhone("");
    setEmail("");
    setApiError("");
    setValidationErrors({});
  };

  const handleReturnLogin = () => {
    navigate("/login");
  };

  return (
    <div className={styles.registrationContainer}>
      <ToastContainer />
      <h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞</h1>
      <div>
        <label>–õ–æ–≥–∏–Ω:</label>
        <input
          type="text"
          value={login}
          placeholder="–≠—Ç–æ –≤–∞—à –∞–¥—Ä–µ—Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã"
          onChange={(e) => setLogin(e.target.value)}
        />
        {validationErrors.login && (
          <span className={styles.errorMessage}>{validationErrors.login}</span>
        )}
      </div>
      <div className={styles.passwordContainer}>
          <label>–ü–∞—Ä–æ–ª—å:</label>
          <input
            type={showPassword ? "text" : "password"}
            placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          <span
            className={styles.passwordToggle}
            onClick={() => setShowPassword((prev) => !prev)}
          >
            {showPassword ? "üôà" : "üëÅÔ∏è"}
          </span>
          {validationErrors.password && (
          <span className={styles.errorMessage}>
            {validationErrors.password}
          </span>
        )}
      </div>
      <div>
        <label>–ò–º—è:</label>
        <input
          type="text"
          value={firstName}
          onChange={(e) => setFirstName(e.target.value)}
        />
        {validationErrors.firstName && (
          <span className={styles.errorMessage}>
            {validationErrors.firstName}
          </span>
        )}
      </div>
      <div>
        <label>–§–∞–º–∏–ª–∏—è:</label>
        <input
          type="text"
          value={lastName}
          onChange={(e) => setLastName(e.target.value)}
        />
        {validationErrors.lastName && (
          <span className={styles.errorMessage}>
            {validationErrors.lastName}
          </span>
        )}
      </div>
      <div>
        <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
        <input
          type="text"
          value={phone}
          onChange={(e) => setPhone(e.target.value)}
        />
        {validationErrors.phone && (
          <span className={styles.errorMessage}>{validationErrors.phone}</span>
        )}
      </div>
      <div>
        <label>Email:</label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        {validationErrors.email && (
          <span className={styles.errorMessage}>{validationErrors.email}</span>
        )}
      </div>
      {/*
      <div>
        <label>–¢–∏–ø —Ä–æ–ª–∏:</label>
        <select
          value={roleType}
          onChange={(e) =>
            setRoleType(e.target.value as "employee" | "director")
          }
        >
          <option value="employee">–†–∞–±–æ—Ç–Ω–∏–∫</option>
          <option value="director">–î–∏—Ä–µ–∫—Ç–æ—Ä</option>
        </select>
      </div>
      */}
      <div className={styles.–≤uttonsGroup}>
        <div>
          <button className={styles.registrationButton} 
                  onClick={handleRegistration}>
            –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
          </button>
          <button className={styles.resetButton}
                  onClick={handleReset}>
            –°–±—Ä–æ—Å
          </button>
        </div>
        <div className={styles.cancelButtonContainer}>
          <button className={styles.cancelButton}
                  onClick={handleReturnLogin} 
                   >
            –û—Ç–º–µ–Ω–∞
        </button>
        </div>
      </div>
      {apiError && <span className={styles.errorMessage}>{apiError}</span>}
    </div>
  );
};

export default Registration;
